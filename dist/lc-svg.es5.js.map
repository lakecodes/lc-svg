{"version":3,"file":"lc-svg.es5.js","sources":["ts/lc-svg.ts","ts/src/app/modules/lcsvg/lcsvg.module.ts","ts/src/app/modules/lcsvg/pipes/return-keys.pipe.ts","ts/src/app/modules/lcsvg/svg-g.component.ts","ts/src/app/modules/lcsvg/lcsvg.component.ts","ts/src/app/modules/services/lc-svg.service.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {LcSvgModule} from './public_api';\n\nexport {LcSvgComponent as ɵa} from './src/app/modules/lcsvg/lcsvg.component';\nexport {ReturnKeysPipe as ɵc} from './src/app/modules/lcsvg/pipes/return-keys.pipe';\nexport {LcSvgGroupComponent as ɵd} from './src/app/modules/lcsvg/svg-g.component';\nexport {LcSvgService as ɵb} from './src/app/modules/services/lc-svg.service';","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { LcSvgComponent } from './lcsvg.component';\nimport { LcSvgGroupComponent } from './svg-g.component';\nimport { LcSvgService } from '../services/lc-svg.service';\nimport { ReturnKeysPipe } from './pipes/return-keys.pipe';\nexport class LcSvgModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    BrowserModule\n  ],\n  declarations: [LcSvgComponent, ReturnKeysPipe, LcSvgGroupComponent ],\n  exports: [LcSvgComponent, LcSvgGroupComponent],\n  providers: [LcSvgService]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction LcSvgModule_tsickle_Closure_declarations() {\n/** @type {?} */\nLcSvgModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLcSvgModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nexport class ReturnKeysPipe implements PipeTransform {\n/**\n * @param {?} value\n * @return {?}\n */\ntransform(value: {}): string[] {\n    if (!value) { return []; } return Object.keys(value);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{\n  name: 'returnKeys'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ReturnKeysPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nReturnKeysPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nReturnKeysPipe.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nexport class LcSvgGroupComponent {\n   g;\n   config;\n   clickenable;\n   mouseenable;\n   cssenable;\n\n  gExport = '';\n  attr = '';\n  isGroup: boolean;\n  groupOpen: boolean;\n\n   shapeClick = new EventEmitter();\n   shapeMouse = new EventEmitter();\n/**\n * @param {?} e\n * @return {?}\n */\nclick(e) { this.shapeClick.emit(e); }\n/**\n * @param {?} e\n * @return {?}\n */\nmouse(e) { this.shapeMouse.emit(e); }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'g[lc-svg-g]',\n  template: `\n    <ng-container *ngFor=\"let grp of (g?.length > 0 ? g : [g])\">\n      <ng-container *ngFor=\"let gkey of grp | returnKeys\">\n          <ng-container [ngSwitch]=\"gkey\">\n\n              <ng-container *ngSwitchCase=\"'circle'\"><!-- SVG Circle -->\n                  <svg:circle *ngFor=\"let c of (grp.circle?.length > 0 ? grp.circle : [grp.circle])\" [attr.id]=\"c['@id']\" [attr.data-name]=\"c['@data-name']\" [attr.class]=\"c['@class']\" [attr.cx]=\"c['@cx']\" [attr.cy]=\"c['@cy']\" [attr.r]=\"c['@r']\" [attr.transform]=\"c['@transform']\" [attr.style]=\"c['@style']\" />\n              </ng-container>\n\n              <ng-container *ngSwitchCase=\"'ellipse'\"><!-- SVG Ellipse -->\n                  <svg:ellipse *ngFor=\"let e of (grp.ellipse?.length > 0 ? grp.ellipse : [grp.ellipse])\" [attr.id]=\"e['@id']\" [attr.data-name]=\"e['@data-name']\" [attr.class]=\"e['@class']\" [attr.cx]=\"e['@cx']\" [attr.cy]=\"e['@cy']\" [attr.rx]=\"e['@rx']\" [attr.ry]=\"e['@ry']\" [attr.transform]=\"e['@transform']\" [attr.style]=\"e['@style']\" />\n              </ng-container>\n\n              <ng-container *ngSwitchCase=\"'line'\"><!-- SVG Line -->\n                  <svg:line *ngFor=\"let l of (grp.line?.length > 0 ? grp.line: [grp.line])\" [attr.id]=\"l['@id']\" [attr.class]=\"l['@class']\" [attr.x1]=\"l['@x1']\" [attr.x2]=\"l['@x2']\" [attr.y1]=\"l['@y1']\" [attr.y2]=\"l['@y2']\" [attr.stroke]=\"l['@stroke']\" [attr.stroke-width]=\"l['@stroke-width']\" [attr.transform]=\"l['@transform']\" [attr.style]=\"l['@style']\"></svg:line>\n              </ng-container>\n\n              <ng-container *ngSwitchCase=\"'path'\"><!-- SVG Path -->\n                  <svg:path *ngFor=\"let p of (grp.path?.length > 0 ? grp.path : [grp.path])\" [attr.id]=\"p['@id']\" [attr.data-name]=\"p['@data-name']\" [attr.class]=\"p['@class']\" [attr.d]=\"p['@d']\" [attr.stroke]=\"p['@stroke']\" [attr.stroke-width]=\"p['@stroke-width']\" [attr.fill]=\"p['@fill']\" [attr.style]=\"p['@style']\" />\n              </ng-container>\n\n              <ng-container *ngSwitchCase=\"'polygon'\"><!-- SVG Polygon -->\n                  <svg:polygon *ngFor=\"let p of (grp.polygon?.length > 0 ? grp.polygon: [grp.polygon])\" [attr.id]=\"p['@id']\" [attr.class]=\"p['@class']\" [attr.points]=\"p['@points']\" [attr.stroke]=\"p['@stroke']\" [attr.stroke-width]=\"p['@stroke-width']\" [attr.fill]=\"p['@fill']\" [attr.transform]=\"p['@transform']\" [attr.style]=\"p['@style']\"></svg:polygon>\n              </ng-container>\n\n              <ng-container *ngSwitchCase=\"'polyline'\"><!-- SVG Line -->\n                  <svg:polyline *ngFor=\"let p of (grp.polyline?.length > 0 ? grp.polyline: [grp.polyline])\"\n                          [attr.id]=\"p['@id']\" [attr.class]=\"p['@class']\"\n                          [attr.points]=\"p['@points']\"\n                          [attr.stroke]=\"p['@stroke']\"\n                          [attr.stroke-width]=\"p['@stroke-width']\"\n                          [attr.fill]=\"p['@fill']\"\n                          [attr.transform]=\"p['@transform']\"\n                          [attr.style]=\"p['@style']\"></svg:polyline>\n              </ng-container>\n\n              <ng-container *ngSwitchCase=\"'rect'\"><!-- SVG Rect -->\n                  <svg:rect *ngFor=\"let r of (grp.rect?.length > 0 ? grp.rect : [grp.rect])\"\n                          [attr.id]=\"r['@id']\"\n                          [attr.data-name]=\"r['@data-name']\"\n                          [attr.class]=\"r['@class']\" [attr.x]=\"r['@x']\"\n                          [attr.y]=\"r['@y']\"\n                          [attr.rx]=\"r['@rx']\"\n                          [attr.ry]=\"r['@ry']\"\n                          [attr.width]=\"r['@width']\"\n                          [attr.height]=\"r['@height']\"\n                          [attr.style]=\"r['@style']\">\n                  </svg:rect>\n              </ng-container>\n\n              <ng-container *ngSwitchCase=\"'text'\"><!-- SVG Text -->\n                  <svg:text *ngFor=\"let t of (grp.text?.length > 0 ? grp.text : [grp.text])\"\n                          [attr.id]=\"t['@id']\"\n                          [attr.class]=\"t['@class']\"\n                          [attr.data-name]=\"t['@data-name']\"\n                          [attr.x]=\"t['@x']\"\n                          [attr.y]=\"t['@y']\"\n                          [attr.dx]=\"t['@dx']\"\n                          [attr.dy]=\"t['@dy']\"\n                          [attr.text-anchor]=\"t['@text-anchor']\"\n                          [attr.transform]=\"t['@transform']\"\n                          [attr.style]=\"t['@style']\">{{t['#text'] ? t['#text'] : t['_']}}\n                      <ng-container *ngIf=\"t.tspan\"><!-- SVG Tspan -->\n                          <svg:tspan *ngFor=\"let sp of (t.tspan?.length > 0 ? t.tspan : [t.tspan])\"\n                              [attr.id]=\"sp['@id']\"\n                              [attr.class]=\"sp['@class']\"\n                              [attr.x]=\"sp['@x']\"\n                              [attr.y]=\"sp['@y']\"\n                              [attr.dx]=\"sp['@dx']\"\n                              [attr.dy]=\"sp['@dy']\"\n                              [attr.rotate]=\"sp['@rotate']\"\n                              [attr.style]=\"sp['@style']\"\n                              [attr.xml:space]=\"sp['@xml:space']\">{{sp['#text'] ? sp['#text'] : sp['_']}}</svg:tspan>\n                      </ng-container>\n                  </svg:text>\n              </ng-container>\n\n              <ng-container *ngSwitchCase=\"'g'\"><!-- SVG Group -->\n                  <svg:g *ngFor=\"let g of (grp.g?.length > 0 ? grp.g : [grp.g]); let i = index;\"\n                         (click)=\"clickenable ? click($event) : null\"\n                         (mouseenter)=\"mouseenable ? mouse($event) : null\"\n                         [attr.id]=\"g['@id']\"\n                         [attr.class]=\"(config && cssenable) ? (g['@class'] ? config.classes.push(g['@class']) : config.classes) : g['@class']\"\n                         [attr.data-v]=\"i\"\n                         [g]=\"g\"\n                         lc-svg-g></svg:g>\n              </ng-container>\n\n          </ng-container>\n      </ng-container>\n    </ng-container>\n  `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'g': [{ type: Input },],\n'config': [{ type: Input },],\n'clickenable': [{ type: Input },],\n'mouseenable': [{ type: Input },],\n'cssenable': [{ type: Input },],\n'shapeClick': [{ type: Output },],\n'shapeMouse': [{ type: Output },],\n};\n}\n\nfunction LcSvgGroupComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nLcSvgGroupComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLcSvgGroupComponent.ctorParameters;\n/** @type {?} */\nLcSvgGroupComponent.propDecorators;\n/** @type {?} */\nLcSvgGroupComponent.prototype.g;\n/** @type {?} */\nLcSvgGroupComponent.prototype.config;\n/** @type {?} */\nLcSvgGroupComponent.prototype.clickenable;\n/** @type {?} */\nLcSvgGroupComponent.prototype.mouseenable;\n/** @type {?} */\nLcSvgGroupComponent.prototype.cssenable;\n/** @type {?} */\nLcSvgGroupComponent.prototype.gExport;\n/** @type {?} */\nLcSvgGroupComponent.prototype.attr;\n/** @type {?} */\nLcSvgGroupComponent.prototype.isGroup;\n/** @type {?} */\nLcSvgGroupComponent.prototype.groupOpen;\n/** @type {?} */\nLcSvgGroupComponent.prototype.shapeClick;\n/** @type {?} */\nLcSvgGroupComponent.prototype.shapeMouse;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, Input, OnInit, Output, EventEmitter, Pipe, PipeTransform } from '@angular/core';\nimport { NgSwitch, NgSwitchCase } from '@angular/common';\nimport { ReturnKeysPipe } from './pipes/return-keys.pipe';\nimport { LcSvgGroupComponent } from './svg-g.component';\nimport { ILcSvgConfig } from './lcsvg.interface';\nimport { LcSvgService } from '../services/lc-svg.service';\nexport class LcSvgComponent implements OnInit {\n     url;\n     config: ILcSvgConfig;\n\n     svgclick: EventEmitter<any> = new EventEmitter();\n     mouse: EventEmitter<any> = new EventEmitter();\n    svg: SVGAElement;\n    errorMessage: String;\n/**\n * @param {?} _svgService\n */\nconstructor(private _svgService: LcSvgService) {}\n/**\n * @return {?}\n */\nngOnInit() {\n        this._svgService.getSvg(this.url)\n        .subscribe(data => this.svg = data,\n        error => this.errorMessage = /** @type {?} */(( <any>error)));\n    }\n/**\n * @param {?} e\n * @return {?}\n */\nonShapeClick(e) { this.svgclick.emit(e); }\n/**\n * @param {?} e\n * @return {?}\n */\nonShapeMouse(e) { this.mouse.emit(e); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    // tslint:disable-next-line:component-selector\n    selector: 'lc-svg',\n    template: `\n      <svg *ngIf=\"svg\" [attr.id]=\"svg.svg['@id']\" [attr.xmlns]=\"svg.svg['@xmlns']\" [attr.xmlns:xlink]=\"svg.svg['@xmlns:xlink']\" [attr.viewBox]=\"svg.svg['@viewBox']\"><!-- SVG -->\n          <svg:defs *ngIf=\"svg.svg.defs\"><!-- SVG Defs -->\n              <svg:style type=\"text/css\" *ngIf=\"svg.svg.defs.style\">{{svg.svg.defs.style}}</svg:style>\n              <svg:clipPath *ngIf=\"svg.svg.defs.clipPath\" [attr.id]=\"svg.svg.defs.clipPath['@id']\" [attr.g]=\"svg.svg.defs.clipPath\" lc-svg-g></svg:clipPath>\n          </svg:defs>\n          <title *ngIf=\"svg.svg.title\">{{svg.svg.title}}</title>\n          <ng-container *ngIf=\"!config || !config.layerscope\">\n              <svg:g *ngFor=\"let g of svg.svg.g; let i = index;\"\n                     [g]=\"g\"\n                     [config]=\"config\"\n                     [clickenable]=\"config && config.click ? config.click.indexOf(i) > -1 : false\"\n                     [mouseenable]=\"config && config.mouseover ? config.mouseover.indexOf(i) > -1 : false\"\n                     [cssenable]=\"config && config.classscope.length > -1 ? config.classscope.indexOf(i) > -1 : false\"\n                     [attr.id]=\"g['@id']\"\n                     [attr.class]=\"g['@class']\"\n                     [attr.style]=\"g['@style']\"\n                     [attr.transform]=\"g['@transform']\"\n                     (shapeClick)=\"onShapeClick($event)\"\n                     (shapeMouse)=\"onShapeMouse($event)\"\n                     lc-svg-g></svg:g><!-- SVG Shape Data -->\n          </ng-container>\n          <ng-container *ngIf=\"config && config.layerscope ? config.layerscope.length > 0 : false\">\n              <svg:g *ngFor=\"let i of config.layerscope\"\n                     [g]=\"svg.svg.g[i]\"\n                     [config]=\"config\"\n                     [clickenable]=\"config.click ? config.click.indexOf(i) > -1 : false\"\n                     [mouseenable]=\"config.mouseover ? config.mouseover.indexOf(i) > -1 : false\"\n                     [cssenable]=\"config.classscope.length > -1 ? config.classscope.indexOf(i) > -1 : false\"\n                     [attr.id]=\"svg.svg.g[i]['@id']\"\n                     [attr.class]=\"svg.svg.g[i]['@class']\"\n                     [attr.style]=\"svg.svg.g[i]['@style']\"\n                     [attr.transform]=\"svg.svg.g[i]['@transform']\"\n                     (shapeClick)=\"onShapeClick($event)\"\n                     (shapeMouse)=\"onShapeMouse($event)\"\n                     lc-svg-g></svg:g><!-- SVG Shape Data -->\n          </ng-container>\n      </svg>\n    `,\n    providers: [LcSvgService]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: LcSvgService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'url': [{ type: Input },],\n'config': [{ type: Input },],\n'svgclick': [{ type: Output },],\n'mouse': [{ type: Output },],\n};\n}\n\nfunction LcSvgComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nLcSvgComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLcSvgComponent.ctorParameters;\n/** @type {?} */\nLcSvgComponent.propDecorators;\n/** @type {?} */\nLcSvgComponent.prototype.url;\n/** @type {?} */\nLcSvgComponent.prototype.config;\n/** @type {?} */\nLcSvgComponent.prototype.svgclick;\n/** @type {?} */\nLcSvgComponent.prototype.mouse;\n/** @type {?} */\nLcSvgComponent.prototype.svg;\n/** @type {?} */\nLcSvgComponent.prototype.errorMessage;\n/** @type {?} */\nLcSvgComponent.prototype._svgService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { Http, Response, Jsonp } from '@angular/http';\nimport { Observable } from 'rxjs/Observable';\nimport { parseString } from 'xml2js';\n\nimport'rxjs/add/operator/map';\nimport'rxjs/add/operator/do';\nimport'rxjs/add/operator/catch';\nexport class LcSvgService {\n/**\n * @param {?} _http\n */\nconstructor(private _http: Http) { }\n/**\n * @param {?} filepath\n * @return {?}\n */\ngetSvg(filepath: string): Observable<SVGAElement> {\n        return this._http.get(filepath)\n            // get response as text because they have not given us a valid JSON response.\n            .map((response: Response) => this.xml2Json(response.text()))\n            .do(data => console.log(data))\n            .catch(this.handleError);\n    }\n/**\n * @param {?} xml\n * @return {?}\n */\nxml2Json(xml) {\n      let /** @type {?} */ json;\n/**\n * @param {?} name\n * @return {?}\n */\nfunction attrPrefix(name) { return `@${name}`; }\n      parseString(xml, {\n          explicitChildren : false,\n          explicitArray : false,\n          explicitRoot : true,\n          mergeAttrs : true,\n          trim : true,\n          attrNameProcessors : [attrPrefix]\n        },\n        function(err, result) {\n          json = result;\n        });\n        return json;\n      }\n/**\n * @param {?} error\n * @return {?}\n */\nprivate handleError(error: Response) {\n        console.log('**ERROR** SVG Service ' + error);\n        return Observable.throw(error.json().error || 'Server error');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n];\n}\n\nfunction LcSvgService_tsickle_Closure_declarations() {\n/** @type {?} */\nLcSvgService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLcSvgService.ctorParameters;\n/** @type {?} */\nLcSvgService.prototype._http;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["Observable"],"mappings":"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"}
