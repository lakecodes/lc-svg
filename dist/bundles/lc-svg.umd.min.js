!function(t,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports,require("@angular/core"),require("@angular/common"),require("@angular/platform-browser"),require("@angular/http"),require("rxjs/Observable"),require("xml2js"),require("rxjs/add/operator/map"),require("rxjs/add/operator/do"),require("rxjs/add/operator/catch")):"function"==typeof define&&define.amd?define(["exports","@angular/core","@angular/common","@angular/platform-browser","@angular/http","rxjs/Observable","xml2js","rxjs/add/operator/map","rxjs/add/operator/do","rxjs/add/operator/catch"],n):n(t["lc-svg"]={},t.ng.core,t.ng.common,t.ng.platformBrowser,t.ng.http,t.Rx,t["^0"][4][19])}(this,function(t,n,e,r,s,a,o){"use strict";var i=function(){function t(t){this._http=t}return t.prototype.getSvg=function(t){var n=this;return this._http.get(t).map(function(t){return n.xml2Json(t.text())})["do"](function(t){return console.log(t)})["catch"](this.handleError)},t.prototype.xml2Json=function(t){var n;return o.parseString(t,{explicitChildren:!1,explicitArray:!1,explicitRoot:!0,mergeAttrs:!0,trim:!0,attrNameProcessors:[function(t){return"@"+t}]},function(t,e){n=e}),n},t.prototype.handleError=function(t){return console.log("**ERROR** SVG Service "+t),a.Observable["throw"](t.json().error||"Server error")},t}();i.decorators=[{type:n.Injectable}],i.ctorParameters=function(){return[{type:s.Http}]};var g=function(){function t(t){this._svgService=t,this.svgclick=new n.EventEmitter,this.mouse=new n.EventEmitter}return t.prototype.ngOnInit=function(){var t=this;this._svgService.getSvg(this.url).subscribe(function(n){return t.svg=n},function(n){return t.errorMessage=n})},t.prototype.onShapeClick=function(t){this.svgclick.emit(t)},t.prototype.onShapeMouse=function(t){this.mouse.emit(t)},t}();g.decorators=[{type:n.Component,args:[{selector:"lc-svg",template:'\n      <svg *ngIf="svg" [attr.id]="svg.svg[\'@id\']" [attr.xmlns]="svg.svg[\'@xmlns\']" [attr.xmlns:xlink]="svg.svg[\'@xmlns:xlink\']" [attr.viewBox]="svg.svg[\'@viewBox\']">\x3c!-- SVG --\x3e\n          <svg:defs *ngIf="svg.svg.defs">\x3c!-- SVG Defs --\x3e\n              <svg:style type="text/css" *ngIf="svg.svg.defs.style">{{svg.svg.defs.style}}</svg:style>\n              <svg:clipPath *ngIf="svg.svg.defs.clipPath" [attr.id]="svg.svg.defs.clipPath[\'@id\']" [attr.g]="svg.svg.defs.clipPath" lc-svg-g></svg:clipPath>\n          </svg:defs>\n          <title *ngIf="svg.svg.title">{{svg.svg.title}}</title>\n          <ng-container *ngIf="!config || !config.layerscope">\n              <svg:g *ngFor="let g of svg.svg.g; let i = index;"\n                     [g]="g"\n                     [config]="config"\n                     [clickenable]="config && config.click ? config.click.indexOf(i) > -1 : false"\n                     [mouseenable]="config && config.mouseover ? config.mouseover.indexOf(i) > -1 : false"\n                     [cssenable]="config && config.classscope.length > -1 ? config.classscope.indexOf(i) > -1 : false"\n                     [attr.id]="g[\'@id\']"\n                     [attr.class]="g[\'@class\']"\n                     [attr.style]="g[\'@style\']"\n                     [attr.transform]="g[\'@transform\']"\n                     (shapeClick)="onShapeClick($event)"\n                     (shapeMouse)="onShapeMouse($event)"\n                     lc-svg-g></svg:g>\x3c!-- SVG Shape Data --\x3e\n          </ng-container>\n          <ng-container *ngIf="config && config.layerscope ? config.layerscope.length > 0 : false">\n              <svg:g *ngFor="let i of config.layerscope"\n                     [g]="svg.svg.g[i]"\n                     [config]="config"\n                     [clickenable]="config.click ? config.click.indexOf(i) > -1 : false"\n                     [mouseenable]="config.mouseover ? config.mouseover.indexOf(i) > -1 : false"\n                     [cssenable]="config.classscope.length > -1 ? config.classscope.indexOf(i) > -1 : false"\n                     [attr.id]="svg.svg.g[i][\'@id\']"\n                     [attr.class]="svg.svg.g[i][\'@class\']"\n                     [attr.style]="svg.svg.g[i][\'@style\']"\n                     [attr.transform]="svg.svg.g[i][\'@transform\']"\n                     (shapeClick)="onShapeClick($event)"\n                     (shapeMouse)="onShapeMouse($event)"\n                     lc-svg-g></svg:g>\x3c!-- SVG Shape Data --\x3e\n          </ng-container>\n      </svg>\n    ',providers:[i]}]}],g.ctorParameters=function(){return[{type:i}]},g.propDecorators={url:[{type:n.Input}],config:[{type:n.Input}],svgclick:[{type:n.Output}],mouse:[{type:n.Output}]};var c=function(){function t(){this.gExport="",this.attr="",this.shapeClick=new n.EventEmitter,this.shapeMouse=new n.EventEmitter}return t.prototype.click=function(t){this.shapeClick.emit(t)},t.prototype.mouse=function(t){this.shapeMouse.emit(t)},t}();c.decorators=[{type:n.Component,args:[{selector:"g[lc-svg-g]",template:'\n    <ng-container *ngFor="let grp of (g?.length > 0 ? g : [g])">\n      <ng-container *ngFor="let gkey of grp | returnKeys">\n          <ng-container [ngSwitch]="gkey">\n\n              <ng-container *ngSwitchCase="\'circle\'">\x3c!-- SVG Circle --\x3e\n                  <svg:circle *ngFor="let c of (grp.circle?.length > 0 ? grp.circle : [grp.circle])" [attr.id]="c[\'@id\']" [attr.data-name]="c[\'@data-name\']" [attr.class]="c[\'@class\']" [attr.cx]="c[\'@cx\']" [attr.cy]="c[\'@cy\']" [attr.r]="c[\'@r\']" [attr.transform]="c[\'@transform\']" [attr.style]="c[\'@style\']" />\n              </ng-container>\n\n              <ng-container *ngSwitchCase="\'ellipse\'">\x3c!-- SVG Ellipse --\x3e\n                  <svg:ellipse *ngFor="let e of (grp.ellipse?.length > 0 ? grp.ellipse : [grp.ellipse])" [attr.id]="e[\'@id\']" [attr.data-name]="e[\'@data-name\']" [attr.class]="e[\'@class\']" [attr.cx]="e[\'@cx\']" [attr.cy]="e[\'@cy\']" [attr.rx]="e[\'@rx\']" [attr.ry]="e[\'@ry\']" [attr.transform]="e[\'@transform\']" [attr.style]="e[\'@style\']" />\n              </ng-container>\n\n              <ng-container *ngSwitchCase="\'line\'">\x3c!-- SVG Line --\x3e\n                  <svg:line *ngFor="let l of (grp.line?.length > 0 ? grp.line: [grp.line])" [attr.id]="l[\'@id\']" [attr.class]="l[\'@class\']" [attr.x1]="l[\'@x1\']" [attr.x2]="l[\'@x2\']" [attr.y1]="l[\'@y1\']" [attr.y2]="l[\'@y2\']" [attr.stroke]="l[\'@stroke\']" [attr.stroke-width]="l[\'@stroke-width\']" [attr.transform]="l[\'@transform\']" [attr.style]="l[\'@style\']"></svg:line>\n              </ng-container>\n\n              <ng-container *ngSwitchCase="\'path\'">\x3c!-- SVG Path --\x3e\n                  <svg:path *ngFor="let p of (grp.path?.length > 0 ? grp.path : [grp.path])" [attr.id]="p[\'@id\']" [attr.data-name]="p[\'@data-name\']" [attr.class]="p[\'@class\']" [attr.d]="p[\'@d\']" [attr.stroke]="p[\'@stroke\']" [attr.stroke-width]="p[\'@stroke-width\']" [attr.fill]="p[\'@fill\']" [attr.style]="p[\'@style\']" />\n              </ng-container>\n\n              <ng-container *ngSwitchCase="\'polygon\'">\x3c!-- SVG Polygon --\x3e\n                  <svg:polygon *ngFor="let p of (grp.polygon?.length > 0 ? grp.polygon: [grp.polygon])" [attr.id]="p[\'@id\']" [attr.class]="p[\'@class\']" [attr.points]="p[\'@points\']" [attr.stroke]="p[\'@stroke\']" [attr.stroke-width]="p[\'@stroke-width\']" [attr.fill]="p[\'@fill\']" [attr.transform]="p[\'@transform\']" [attr.style]="p[\'@style\']"></svg:polygon>\n              </ng-container>\n\n              <ng-container *ngSwitchCase="\'polyline\'">\x3c!-- SVG Line --\x3e\n                  <svg:polyline *ngFor="let p of (grp.polyline?.length > 0 ? grp.polyline: [grp.polyline])"\n                          [attr.id]="p[\'@id\']" [attr.class]="p[\'@class\']"\n                          [attr.points]="p[\'@points\']"\n                          [attr.stroke]="p[\'@stroke\']"\n                          [attr.stroke-width]="p[\'@stroke-width\']"\n                          [attr.fill]="p[\'@fill\']"\n                          [attr.transform]="p[\'@transform\']"\n                          [attr.style]="p[\'@style\']"></svg:polyline>\n              </ng-container>\n\n              <ng-container *ngSwitchCase="\'rect\'">\x3c!-- SVG Rect --\x3e\n                  <svg:rect *ngFor="let r of (grp.rect?.length > 0 ? grp.rect : [grp.rect])"\n                          [attr.id]="r[\'@id\']"\n                          [attr.data-name]="r[\'@data-name\']"\n                          [attr.class]="r[\'@class\']" [attr.x]="r[\'@x\']"\n                          [attr.y]="r[\'@y\']"\n                          [attr.rx]="r[\'@rx\']"\n                          [attr.ry]="r[\'@ry\']"\n                          [attr.width]="r[\'@width\']"\n                          [attr.height]="r[\'@height\']"\n                          [attr.style]="r[\'@style\']">\n                  </svg:rect>\n              </ng-container>\n\n              <ng-container *ngSwitchCase="\'text\'">\x3c!-- SVG Text --\x3e\n                  <svg:text *ngFor="let t of (grp.text?.length > 0 ? grp.text : [grp.text])"\n                          [attr.id]="t[\'@id\']"\n                          [attr.class]="t[\'@class\']"\n                          [attr.data-name]="t[\'@data-name\']"\n                          [attr.x]="t[\'@x\']"\n                          [attr.y]="t[\'@y\']"\n                          [attr.dx]="t[\'@dx\']"\n                          [attr.dy]="t[\'@dy\']"\n                          [attr.text-anchor]="t[\'@text-anchor\']"\n                          [attr.transform]="t[\'@transform\']"\n                          [attr.style]="t[\'@style\']">{{t[\'#text\'] ? t[\'#text\'] : t[\'_\']}}\n                      <ng-container *ngIf="t.tspan">\x3c!-- SVG Tspan --\x3e\n                          <svg:tspan *ngFor="let sp of (t.tspan?.length > 0 ? t.tspan : [t.tspan])"\n                              [attr.id]="sp[\'@id\']"\n                              [attr.class]="sp[\'@class\']"\n                              [attr.x]="sp[\'@x\']"\n                              [attr.y]="sp[\'@y\']"\n                              [attr.dx]="sp[\'@dx\']"\n                              [attr.dy]="sp[\'@dy\']"\n                              [attr.rotate]="sp[\'@rotate\']"\n                              [attr.style]="sp[\'@style\']"\n                              [attr.xml:space]="sp[\'@xml:space\']">{{sp[\'#text\'] ? sp[\'#text\'] : sp[\'_\']}}</svg:tspan>\n                      </ng-container>\n                  </svg:text>\n              </ng-container>\n\n              <ng-container *ngSwitchCase="\'g\'">\x3c!-- SVG Group --\x3e\n                  <svg:g *ngFor="let g of (grp.g?.length > 0 ? grp.g : [grp.g]); let i = index;"\n                         (click)="clickenable ? click($event) : null"\n                         (mouseenter)="mouseenable ? mouse($event) : null"\n                         [attr.id]="g[\'@id\']"\n                         [attr.class]="(config && cssenable) ? (g[\'@class\'] ? config.classes.push(g[\'@class\']) : config.classes) : g[\'@class\']"\n                         [attr.data-v]="i"\n                         [g]="g"\n                         lc-svg-g></svg:g>\n              </ng-container>\n\n          </ng-container>\n      </ng-container>\n    </ng-container>\n  '}]}],c.ctorParameters=function(){return[]},c.propDecorators={g:[{type:n.Input}],config:[{type:n.Input}],clickenable:[{type:n.Input}],mouseenable:[{type:n.Input}],cssenable:[{type:n.Input}],shapeClick:[{type:n.Output}],shapeMouse:[{type:n.Output}]};var l=function(){function t(){}return t.prototype.transform=function(t){return t?Object.keys(t):[]},t}();l.decorators=[{type:n.Pipe,args:[{name:"returnKeys"}]}],l.ctorParameters=function(){return[]};var p=function(){return function(){}}();p.decorators=[{type:n.NgModule,args:[{imports:[e.CommonModule,r.BrowserModule],declarations:[g,l,c],exports:[g,c],providers:[i]}]}],p.ctorParameters=function(){return[]},t.LcSvgModule=p,t.ɵa=g,t.ɵc=l,t.ɵd=c,t.ɵb=i,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=lc-svg.umd.min.js.map
